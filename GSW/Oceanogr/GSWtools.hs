{-# LANGUAGE ForeignFunctionInterface #-}
-- Automatically generated by Gentoolbox.hs at "Tue, 06 Jan 2015 11:49:17 +0900"
module Oceanogr.GSWtools where

import Oceanogr.GSWcaller

import Foreign.Ptr (Ptr)
import Foreign.C.Types
import Foreign.Storable (peek, poke)
import Foreign.Marshal.Alloc (alloca, free)
import Foreign.Marshal.Array (peekArray, withArray, mallocArray)

---
gsw_sp_from_c :: Double -> Double -> Double -> IO Double
gsw_sp_from_c c t p  =
    realToFrac `fmap` with3Args (map realToFrac [c,t,p]) [] gsw_sp_from_c_

foreign import ccall "gsw_sp_from_c_" gsw_sp_from_c_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_c_from_sp :: Double -> Double -> Double -> IO Double
gsw_c_from_sp sp t p  =
    realToFrac `fmap` with3Args (map realToFrac [sp,t,p]) [] gsw_c_from_sp_

foreign import ccall "gsw_c_from_sp_" gsw_c_from_sp_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sp_from_sk :: Double -> IO Double
gsw_sp_from_sk sk  =
    realToFrac `fmap` with1Args (map realToFrac [sk]) [] gsw_sp_from_sk_

foreign import ccall "gsw_sp_from_sk_" gsw_sp_from_sk_ :: Ptr CDouble -> IO CDouble

---
gsw_sa_from_sp :: Double -> Double -> Double -> Double -> IO Double
gsw_sa_from_sp sp p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sp,p,long,lat]) [] gsw_sa_from_sp_

foreign import ccall "gsw_sa_from_sp_" gsw_sa_from_sp_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sstar_from_sp :: Double -> Double -> Double -> Double -> IO Double
gsw_sstar_from_sp sp p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sp,p,long,lat]) [] gsw_sstar_from_sp_

foreign import ccall "gsw_sstar_from_sp_" gsw_sstar_from_sp_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_ct_from_t :: Double -> Double -> Double -> IO Double
gsw_ct_from_t sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_ct_from_t_

foreign import ccall "gsw_ct_from_t_" gsw_ct_from_t_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_deltasa_from_sp :: Double -> Double -> Double -> Double -> IO Double
gsw_deltasa_from_sp sp p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sp,p,long,lat]) [] gsw_deltasa_from_sp_

foreign import ccall "gsw_deltasa_from_sp_" gsw_deltasa_from_sp_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sr_from_sp :: Double -> IO Double
gsw_sr_from_sp sp  =
    realToFrac `fmap` with1Args (map realToFrac [sp]) [] gsw_sr_from_sp_

foreign import ccall "gsw_sr_from_sp_" gsw_sr_from_sp_ :: Ptr CDouble -> IO CDouble

---
gsw_sp_from_sr :: Double -> IO Double
gsw_sp_from_sr sr  =
    realToFrac `fmap` with1Args (map realToFrac [sr]) [] gsw_sp_from_sr_

foreign import ccall "gsw_sp_from_sr_" gsw_sp_from_sr_ :: Ptr CDouble -> IO CDouble

---
gsw_sp_from_sa :: Double -> Double -> Double -> Double -> IO Double
gsw_sp_from_sa sa p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sa,p,long,lat]) [] gsw_sp_from_sa_

foreign import ccall "gsw_sp_from_sa_" gsw_sp_from_sa_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sstar_from_sa :: Double -> Double -> Double -> Double -> IO Double
gsw_sstar_from_sa sa p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sa,p,long,lat]) [] gsw_sstar_from_sa_

foreign import ccall "gsw_sstar_from_sa_" gsw_sstar_from_sa_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sa_from_sstar :: Double -> Double -> Double -> Double -> IO Double
gsw_sa_from_sstar sstar p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sstar,p,long,lat]) [] gsw_sa_from_sstar_

foreign import ccall "gsw_sa_from_sstar_" gsw_sa_from_sstar_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sp_from_sstar :: Double -> Double -> Double -> Double -> IO Double
gsw_sp_from_sstar sstar p long lat  =
    realToFrac `fmap` with4Args (map realToFrac [sstar,p,long,lat]) [] gsw_sp_from_sstar_

foreign import ccall "gsw_sp_from_sstar_" gsw_sp_from_sstar_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_t_from_ct :: Double -> Double -> Double -> IO Double
gsw_t_from_ct sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_t_from_ct_

foreign import ccall "gsw_t_from_ct_" gsw_t_from_ct_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_ct_from_pt :: Double -> Double -> IO Double
gsw_ct_from_pt sa pt  =
    realToFrac `fmap` with2Args (map realToFrac [sa,pt]) [] gsw_ct_from_pt_

foreign import ccall "gsw_ct_from_pt_" gsw_ct_from_pt_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_pt_from_t :: Double -> Double -> Double -> Double -> IO Double
gsw_pt_from_t sa t p p_ref  =
    realToFrac `fmap` with4Args (map realToFrac [sa,t,p,p_ref]) [] gsw_pt_from_t_

foreign import ccall "gsw_pt_from_t_" gsw_pt_from_t_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_pt0_from_t :: Double -> Double -> Double -> IO Double
gsw_pt0_from_t sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_pt0_from_t_

foreign import ccall "gsw_pt0_from_t_" gsw_pt0_from_t_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_pt_from_ct :: Double -> Double -> IO Double
gsw_pt_from_ct sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_pt_from_ct_

foreign import ccall "gsw_pt_from_ct_" gsw_pt_from_ct_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_z_from_p :: Double -> Double -> IO Double
gsw_z_from_p p lat  =
    realToFrac `fmap` with2Args (map realToFrac [p,lat]) [] gsw_z_from_p_

foreign import ccall "gsw_z_from_p_" gsw_z_from_p_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_entropy_from_t :: Double -> Double -> Double -> IO Double
gsw_entropy_from_t sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_entropy_from_t_

foreign import ccall "gsw_entropy_from_t_" gsw_entropy_from_t_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_adiabatic_lapse_rate_from_ct :: Double -> Double -> Double -> IO Double
gsw_adiabatic_lapse_rate_from_ct sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_adiabatic_lapse_rate_from_ct_

foreign import ccall "gsw_adiabatic_lapse_rate_from_ct_" gsw_adiabatic_lapse_rate_from_ct_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_rho :: Double -> Double -> Double -> IO Double
gsw_rho sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_rho_

foreign import ccall "gsw_rho_" gsw_rho_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_alpha :: Double -> Double -> Double -> IO Double
gsw_alpha sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_alpha_

foreign import ccall "gsw_alpha_" gsw_alpha_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_beta :: Double -> Double -> Double -> IO Double
gsw_beta sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_beta_

foreign import ccall "gsw_beta_" gsw_beta_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_alpha_on_beta :: Double -> Double -> Double -> IO Double
gsw_alpha_on_beta sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_alpha_on_beta_

foreign import ccall "gsw_alpha_on_beta_" gsw_alpha_on_beta_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
---
---
gsw_rho_first_derivatives :: Double   -- ^ sa
        -> Double   -- ^ ct
        -> Double   -- ^ p
        -> IO (Double, Double, Double) -- ^ (drho_dsa, drho_dct, drho_dp)

gsw_rho_first_derivatives sa ct p = do
    alloca (\sap -> poke sap (realToFrac sa) >> 
      alloca (\ctp -> poke ctp (realToFrac ct) >> 
        alloca (\pp -> poke pp (realToFrac p) >> 
          alloca (\drho_dsap -> 
          alloca (\drho_dctp ->
          alloca (\drho_dpp -> do

          gsw_rho_first_derivatives_ sap ctp pp drho_dsap drho_dctp drho_dpp 

          drho_dsa' <- realToFrac `fmap` peek drho_dsap :: IO Double
          drho_dct' <- realToFrac `fmap` peek drho_dctp :: IO Double
          drho_dp'  <- realToFrac `fmap` peek drho_dpp  :: IO Double

          return (drho_dsa', drho_dct', drho_dp')
          ))))))


foreign import ccall "gsw_rho_first_derivatives_" gsw_rho_first_derivatives_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

---
gsw_specvol :: Double -> Double -> Double -> IO Double
gsw_specvol sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_specvol_

foreign import ccall "gsw_specvol_" gsw_specvol_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_specvol_anom :: Double -> Double -> Double -> IO Double
gsw_specvol_anom sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_specvol_anom_

foreign import ccall "gsw_specvol_anom_" gsw_specvol_anom_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sigma0 :: Double -> Double -> IO Double
gsw_sigma0 sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_sigma0_

foreign import ccall "gsw_sigma0_" gsw_sigma0_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sigma1 :: Double -> Double -> IO Double
gsw_sigma1 sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_sigma1_

foreign import ccall "gsw_sigma1_" gsw_sigma1_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sigma2 :: Double -> Double -> IO Double
gsw_sigma2 sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_sigma2_

foreign import ccall "gsw_sigma2_" gsw_sigma2_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sigma3 :: Double -> Double -> IO Double
gsw_sigma3 sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_sigma3_

foreign import ccall "gsw_sigma3_" gsw_sigma3_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sigma4 :: Double -> Double -> IO Double
gsw_sigma4 sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_sigma4_

foreign import ccall "gsw_sigma4_" gsw_sigma4_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sound_speed :: Double -> Double -> Double -> IO Double
gsw_sound_speed sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_sound_speed_

foreign import ccall "gsw_sound_speed_" gsw_sound_speed_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_kappa :: Double -> Double -> Double -> IO Double
gsw_kappa sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_kappa_

foreign import ccall "gsw_kappa_" gsw_kappa_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_cabbeling :: Double -> Double -> Double -> IO Double
gsw_cabbeling sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_cabbeling_

foreign import ccall "gsw_cabbeling_" gsw_cabbeling_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_thermobaric :: Double -> Double -> Double -> IO Double
gsw_thermobaric sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_thermobaric_

foreign import ccall "gsw_thermobaric_" gsw_thermobaric_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_internal_energy :: Double -> Double -> Double -> IO Double
gsw_internal_energy sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_internal_energy_

foreign import ccall "gsw_internal_energy_" gsw_internal_energy_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_enthalpy :: Double -> Double -> Double -> IO Double
gsw_enthalpy sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_enthalpy_

foreign import ccall "gsw_enthalpy_" gsw_enthalpy_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_dynamic_enthalpy :: Double -> Double -> Double -> IO Double
gsw_dynamic_enthalpy sa ct p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,ct,p]) [] gsw_dynamic_enthalpy_

foreign import ccall "gsw_dynamic_enthalpy_" gsw_dynamic_enthalpy_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sa_from_rho :: Double -> Double -> Double -> IO Double
gsw_sa_from_rho rho ct p  =
    realToFrac `fmap` with3Args (map realToFrac [rho,ct,p]) [] gsw_sa_from_rho_

foreign import ccall "gsw_sa_from_rho_" gsw_sa_from_rho_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
---
---
gsw_nsquared ::[Double] -- ^ sa
        -> [Double] -- ^ ct
        -> [Double] -- ^ p
        -> [Double] -- ^ lat
        -> Int      -- ^ nz
        -> [Double] -- ^ n2
        -> [Double] -- ^ p_mid
        -> IO ([Double], [Double])
gsw_nsquared sa ct p lat nz n2 p_mid  = do

    n2p    <- mallocArray (nz-1) :: IO (Ptr CDouble)
    p_midp <- mallocArray (nz-1) :: IO (Ptr CDouble)

    withArray (map realToFrac sa) (\sap ->
      withArray (map realToFrac ct) (\ctp ->
        withArray (map realToFrac p) (\pp ->
          withArray (map realToFrac lat) (\latp ->
            alloca (\nzp -> poke nzp (fromIntegral nz) >> 

            gsw_nsquared_ sap ctp pp latp nzp n2p p_midp 
            )))))

    n2' <- (map realToFrac) `fmap` peekArray (nz-1) n2p
    free n2p

    p_mid' <- (map realToFrac) `fmap` peekArray (nz-1) p_midp
    free p_midp

    return (n2', p_mid')

foreign import ccall "gsw_nsquared_" gsw_nsquared_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CInt -> Ptr CDouble -> Ptr CDouble -> IO ()

---
---
---
gsw_turner_rsubrho :: [Double] -- ^ sa
        -> [Double] -- ^ ct
        -> [Double] -- ^ p
        -> Int      -- ^ nz
        -> IO ([Double], [Double], [Double]) -- ^ (tu, rsubrho, p_mid)
gsw_turner_rsubrho sa ct p nz = do

    tup      <- mallocArray (nz-1) :: IO (Ptr CDouble)
    rsubrhop <- mallocArray (nz-1) :: IO (Ptr CDouble)
    p_midp   <- mallocArray (nz-1) :: IO (Ptr CDouble)

    withArray (map realToFrac sa) (\sap ->
      withArray (map realToFrac ct) (\ctp ->
        withArray (map realToFrac p) (\pp ->
          alloca (\nzp -> poke nzp (fromIntegral nz) >> 

          gsw_turner_rsubrho_ sap ctp pp nzp tup rsubrhop p_midp 
          ))))

    tu' <- (map realToFrac) `fmap` peekArray (nz-1) tup
    free tup

    rsubrho' <- (map realToFrac) `fmap` peekArray (nz-1) rsubrhop
    free rsubrhop

    p_mid' <- (map realToFrac) `fmap` peekArray (nz-1) p_midp
    free p_midp

    return (tu',rsubrho',p_mid')

foreign import ccall "gsw_turner_rsubrho_" gsw_turner_rsubrho_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CInt -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

---
---
---
gsw_ipv_vs_fnsquared_ratio :: [Double] -- ^ sa
        -> [Double] -- ^ ct
        -> [Double] -- ^ p
        -> Int      -- ^ nz
        -> IO ([Double], [Double]) -- ^ (ipv_vs_fnsquared_ratio, p_mid)
gsw_ipv_vs_fnsquared_ratio sa ct p nz  = do

    ipv_vs_fnsquared_ratiop <- mallocArray (nz-1) :: IO (Ptr CDouble)
    p_midp                  <- mallocArray (nz-1) :: IO (Ptr CDouble)

    withArray (map realToFrac sa) (\sap ->
      withArray (map realToFrac ct) (\ctp ->
        withArray (map realToFrac p) (\pp ->
          alloca (\nzp -> poke nzp (fromIntegral nz) >> 

          gsw_ipv_vs_fnsquared_ratio_ sap ctp pp nzp ipv_vs_fnsquared_ratiop p_midp 
          ))))

    ipv_vs_fnsquared_ratio' <- (map realToFrac) `fmap` peekArray (nz-1) ipv_vs_fnsquared_ratiop
    free ipv_vs_fnsquared_ratiop

    p_mid' <- (map realToFrac) `fmap` peekArray (nz-1) p_midp
    free p_midp

    return (ipv_vs_fnsquared_ratio',p_mid')

foreign import ccall "gsw_ipv_vs_fnsquared_ratio_" gsw_ipv_vs_fnsquared_ratio_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CInt -> Ptr CDouble -> Ptr CDouble -> IO ()

---
gsw_ct_freezing :: Double -> Double -> Double -> IO Double
gsw_ct_freezing sa p saturation_fraction  =
    realToFrac `fmap` with3Args (map realToFrac [sa,p,saturation_fraction]) [] gsw_ct_freezing_

foreign import ccall "gsw_ct_freezing_" gsw_ct_freezing_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_t_freezing :: Double -> Double -> Double -> IO Double
gsw_t_freezing sa p saturation_fraction  =
    realToFrac `fmap` with3Args (map realToFrac [sa,p,saturation_fraction]) [] gsw_t_freezing_

foreign import ccall "gsw_t_freezing_" gsw_t_freezing_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_latentheat_melting :: Double -> Double -> IO Double
gsw_latentheat_melting sa p  =
    realToFrac `fmap` with2Args (map realToFrac [sa,p]) [] gsw_latentheat_melting_

foreign import ccall "gsw_latentheat_melting_" gsw_latentheat_melting_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_latentheat_evap_ct :: Double -> Double -> IO Double
gsw_latentheat_evap_ct sa ct  =
    realToFrac `fmap` with2Args (map realToFrac [sa,ct]) [] gsw_latentheat_evap_ct_

foreign import ccall "gsw_latentheat_evap_ct_" gsw_latentheat_evap_ct_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_latentheat_evap_t :: Double -> Double -> IO Double
gsw_latentheat_evap_t sa t  =
    realToFrac `fmap` with2Args (map realToFrac [sa,t]) [] gsw_latentheat_evap_t_

foreign import ccall "gsw_latentheat_evap_t_" gsw_latentheat_evap_t_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_grav :: Double -> Double -> IO Double
gsw_grav lat p  =
    realToFrac `fmap` with2Args (map realToFrac [lat,p]) [] gsw_grav_

foreign import ccall "gsw_grav_" gsw_grav_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_rho_t_exact :: Double -> Double -> Double -> IO Double
gsw_rho_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_rho_t_exact_

foreign import ccall "gsw_rho_t_exact_" gsw_rho_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_pot_rho_t_exact :: Double -> Double -> Double -> Double -> IO Double
gsw_pot_rho_t_exact sa t p p_ref  =
    realToFrac `fmap` with4Args (map realToFrac [sa,t,p,p_ref]) [] gsw_pot_rho_t_exact_

foreign import ccall "gsw_pot_rho_t_exact_" gsw_pot_rho_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_alpha_wrt_t_exact :: Double -> Double -> Double -> IO Double
gsw_alpha_wrt_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_alpha_wrt_t_exact_

foreign import ccall "gsw_alpha_wrt_t_exact_" gsw_alpha_wrt_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_beta_const_t_exact :: Double -> Double -> Double -> IO Double
gsw_beta_const_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_beta_const_t_exact_

foreign import ccall "gsw_beta_const_t_exact_" gsw_beta_const_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_specvol_t_exact :: Double -> Double -> Double -> IO Double
gsw_specvol_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_specvol_t_exact_

foreign import ccall "gsw_specvol_t_exact_" gsw_specvol_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sound_speed_t_exact :: Double -> Double -> Double -> IO Double
gsw_sound_speed_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_sound_speed_t_exact_

foreign import ccall "gsw_sound_speed_t_exact_" gsw_sound_speed_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_kappa_t_exact :: Double -> Double -> Double -> IO Double
gsw_kappa_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_kappa_t_exact_

foreign import ccall "gsw_kappa_t_exact_" gsw_kappa_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_enthalpy_t_exact :: Double -> Double -> Double -> IO Double
gsw_enthalpy_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_enthalpy_t_exact_

foreign import ccall "gsw_enthalpy_t_exact_" gsw_enthalpy_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_cp_t_exact :: Double -> Double -> Double -> IO Double
gsw_cp_t_exact sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_cp_t_exact_

foreign import ccall "gsw_cp_t_exact_" gsw_cp_t_exact_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_gibbs :: Int -> Int -> Int -> Double -> Double -> Double -> IO Double
gsw_gibbs ns nt np sa t p  =
    alloca (\nsp -> poke nsp (fromIntegral ns) >>
      alloca (\ntp -> poke ntp (fromIntegral nt) >>
        alloca (\npp -> poke npp (fromIntegral np) >>
          alloca (\sap -> poke sap (realToFrac sa) >>
            alloca (\tp -> poke tp (realToFrac t) >>
              alloca (\pp -> poke pp (realToFrac p) >>

              realToFrac `fmap` gsw_gibbs_ nsp ntp npp sap tp pp
              ))))))

foreign import ccall "gsw_gibbs_" gsw_gibbs_ :: Ptr CInt -> Ptr CInt -> Ptr CInt -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_saar :: Double -> Double -> Double -> IO Double
gsw_saar p long lat  =
    realToFrac `fmap` with3Args (map realToFrac [p,long,lat]) [] gsw_saar_

foreign import ccall "gsw_saar_" gsw_saar_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_deltasa_atlas :: Double -> Double -> Double -> IO Double
gsw_deltasa_atlas p long lat  =
    realToFrac `fmap` with3Args (map realToFrac [p,long,lat]) [] gsw_deltasa_atlas_

foreign import ccall "gsw_deltasa_atlas_" gsw_deltasa_atlas_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
---
---
gsw_add_barrier :: [Double] -- ^ input_data
        -> Double   -- ^ long
        -> Double   -- ^ lat
        -> Double   -- ^ long_grid
        -> Double   -- ^ lat_grid
        -> Double   -- ^ dlong_grid
        -> Double   -- ^ dlat_grid
        -> IO [Double] -- ^ output_data
gsw_add_barrier input_data long lat long_grid lat_grid dlong_grid dlat_grid = do

    output_datap <- mallocArray 4 :: IO (Ptr CDouble)

    withArray (map realToFrac input_data) (\input_datap ->
      alloca (\longp -> poke longp (realToFrac long) >> 
        alloca (\latp -> poke latp (realToFrac lat) >> 
          alloca (\long_gridp -> poke long_gridp (realToFrac long_grid) >> 
            alloca (\lat_gridp -> poke lat_gridp (realToFrac lat_grid) >> 
              alloca (\dlong_gridp -> poke dlong_gridp (realToFrac dlong_grid) >> 
                alloca (\dlat_gridp -> poke dlat_gridp (realToFrac dlat_grid) >> 

                gsw_add_barrier_ input_datap longp latp long_gridp lat_gridp dlong_gridp dlat_gridp output_datap 
                )))))))

    output_data' <- (map realToFrac) `fmap` peekArray 4 output_datap
    free output_datap

    return output_data'

foreign import ccall "gsw_add_barrier_" gsw_add_barrier_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

---
---
---
gsw_add_mean :: [Double] -- ^ data_in
        -> Double   -- ^ long
        -> Double   -- ^ lat
        -> IO [Double] -- ^ data_out
gsw_add_mean data_in long lat = do

    data_outp <- mallocArray 4 :: IO (Ptr CDouble)

    withArray (map realToFrac data_in) (\data_inp ->
      alloca (\longp -> poke longp (realToFrac long) >> 
        alloca (\latp -> poke latp (realToFrac lat) >> 

        gsw_add_mean_ data_inp longp latp data_outp 
        )))

    data_out' <- (map realToFrac) `fmap` peekArray 4 data_outp
    free data_outp
    return data_out'

foreign import ccall "gsw_add_mean_" gsw_add_mean_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO ()

---
xinterp1 :: [Double] -> [Double] -> Int -> Double -> IO Double
xinterp1 x y n x0  = do

    withArray (map realToFrac x) (\xp ->
      withArray (map realToFrac y) (\yp ->
        alloca (\np -> poke np (fromIntegral n) >> 
          alloca (\x0p -> poke x0p (realToFrac x0) >>

          realToFrac `fmap` xinterp1_ xp yp np x0p
          ))))



foreign import ccall "xinterp1_" xinterp1_ :: Ptr CDouble -> Ptr CDouble -> Ptr CInt -> Ptr CDouble -> IO CDouble

---
---
---
indx ::  [Double] -- ^ x
        -> Int      -- ^ n
        -> Double   -- ^ z
        -> IO Int      -- ^ k
indx x n z = do

    withArray (map realToFrac x) (\xp ->
     alloca (\np -> poke np (fromIntegral n) >> 
       alloca (\zp -> poke zp (realToFrac z) >> 
         alloca (\kp -> do

         indx_ xp np zp kp 
         
         fromIntegral `fmap` peek kp
         ))))

foreign import ccall "indx_" indx_ :: Ptr CDouble -> Ptr CInt -> Ptr CDouble -> Ptr CInt -> IO ()

---
gsw_fdelta :: Double -> Double -> Double -> IO Double
gsw_fdelta p long lat  =
    realToFrac `fmap` with3Args (map realToFrac [p,long,lat]) [] gsw_fdelta_

foreign import ccall "gsw_fdelta_" gsw_fdelta_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sa_from_sp_baltic :: Double -> Double -> Double -> IO Double
gsw_sa_from_sp_baltic sp long lat  =
    realToFrac `fmap` with3Args (map realToFrac [sp,long,lat]) [] gsw_sa_from_sp_baltic_

foreign import ccall "gsw_sa_from_sp_baltic_" gsw_sa_from_sp_baltic_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_sp_from_sa_baltic :: Double -> Double -> Double -> IO Double
gsw_sp_from_sa_baltic sa long lat  =
    realToFrac `fmap` with3Args (map realToFrac [sa,long,lat]) [] gsw_sp_from_sa_baltic_

foreign import ccall "gsw_sp_from_sa_baltic_" gsw_sp_from_sa_baltic_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_entropy_part :: Double -> Double -> Double -> IO Double
gsw_entropy_part sa t p  =
    realToFrac `fmap` with3Args (map realToFrac [sa,t,p]) [] gsw_entropy_part_

foreign import ccall "gsw_entropy_part_" gsw_entropy_part_ :: Ptr CDouble -> Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_entropy_part_zerop :: Double -> Double -> IO Double
gsw_entropy_part_zerop sa pt0  =
    realToFrac `fmap` with2Args (map realToFrac [sa,pt0]) [] gsw_entropy_part_zerop_

foreign import ccall "gsw_entropy_part_zerop_" gsw_entropy_part_zerop_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_gibbs_pt0_pt0 :: Double -> Double -> IO Double
gsw_gibbs_pt0_pt0 sa pt0  =
    realToFrac `fmap` with2Args (map realToFrac [sa,pt0]) [] gsw_gibbs_pt0_pt0_

foreign import ccall "gsw_gibbs_pt0_pt0_" gsw_gibbs_pt0_pt0_ :: Ptr CDouble -> Ptr CDouble -> IO CDouble

---
gsw_specvol_sso_0_p :: Double -> IO Double
gsw_specvol_sso_0_p p  =
    realToFrac `fmap` with1Args (map realToFrac [p]) [] gsw_specvol_sso_0_p_

foreign import ccall "gsw_specvol_sso_0_p_" gsw_specvol_sso_0_p_ :: Ptr CDouble -> IO CDouble

---
gsw_hill_ratio_at_sp2 :: Double -> IO Double
gsw_hill_ratio_at_sp2 t  =
    realToFrac `fmap` with1Args (map realToFrac [t]) [] gsw_hill_ratio_at_sp2_

foreign import ccall "gsw_hill_ratio_at_sp2_" gsw_hill_ratio_at_sp2_ :: Ptr CDouble -> IO CDouble

