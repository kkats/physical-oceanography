diff -ur hstatistics-0.2.5.2/hstatistics.cabal hstatistics-patched/hstatistics.cabal
--- hstatistics-0.2.5.2/hstatistics.cabal	2014-07-22 09:40:36.000000000 +0900
+++ hstatistics-patched/hstatistics.cabal	2015-07-10 11:30:04.000000000 +0900
@@ -1,4 +1,4 @@
-Name:               hstatistics
+Name:               hstatistics-patched
 Version:            0.2.5.2
 License:            BSD3
 License-file:       LICENSE
diff -ur hstatistics-0.2.5.2/lib/Numeric/Statistics/PCA.hs hstatistics-patched/lib/Numeric/Statistics/PCA.hs
--- hstatistics-0.2.5.2/lib/Numeric/Statistics/PCA.hs	2014-07-22 09:40:36.000000000 +0900
+++ hstatistics-patched/lib/Numeric/Statistics/PCA.hs	2015-07-10 11:30:25.000000000 +0900
@@ -35,7 +35,7 @@
 --    the threshhold
 pca :: I.Array Int (Vector Double)    -- the data
     -> Double                         -- eigenvalue threshold
-    -> Matrix Double
+    -> ([Double], Matrix Double)
 pca d q = let d' = fmap (\x -> x - (scalar $ mean x)) d -- remove the mean from each dimension
               cv = covarianceMatrix d'
               (val',vec') = eigSH cv           -- the covariance matrix is real symmetric
@@ -43,13 +43,14 @@
               vec = toColumns vec'
               v' = zip val vec
               v = filter (\(x,_) -> x > q) v'  -- keep only eigens > than parameter
-          in fromColumns $ snd $ unzip v
+              (va, ve) = unzip v
+          in (va, fromColumns ve)
 
 -- | find N greatest principal components of multidimensional data
 --    according to size of the eigenvalue
 pcaN :: I.Array Int (Vector Double)    -- the data
      -> Int                            -- number of components to return
-     -> Matrix Double
+     -> ([Double], Matrix Double)
 pcaN d n = let d' = fmap (\x -> x - (scalar $ mean x)) d -- remove the mean from each dimension
                cv = covarianceMatrix d'
                (val',vec') = eigSH cv           -- the covariance matrix is real symmetric
@@ -57,7 +58,8 @@
                vec = toColumns vec'
                v' = zip val vec
                v = take n $ reverse $ sortBy (comparing fst) v'
-           in fromColumns $ snd $ unzip v
+               (va, ve) = unzip v
+           in (va, fromColumns ve)
 
 -- | perform a PCA transform of the original data (remove mean)
 -- |     Final = M^T Data^T
